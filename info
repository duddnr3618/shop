**MVC구조
Client <-----> Controller <-----> Service <-----> Repository <-----> DB
				DTO								DTO						DTO									Entity

***Querydsl : JPQL을 코드로 작성 할 수 있도록 도아주는 빌더 API
- 문자열이 아닌 자바소스코드로 작성 하기 때문에 컴파일 시점에 오류를 발견할수 있음
- 비슷한 쿼리를 재사용 할 수 있으며 제약 조건 및 가독성을 향상시킬수 있음
- 고정된 SQL문이 아닌 조건에 맞게 동적으로 쿼리를 생성할수 있음
- IDLE의 도움을 받아서 자동 완성 기능을 이용할수 있기때문에 생산성을 향상 가능

-----------------------------------------------------
***어노테이션
@autowired : 객체를 만들어 메모리에 로딩 시켜줌

--------
*** thymeleaf : (서버사이드 템플릿 엔진의 한 종류)
-서버 사이드 렌더링 : 미리 정의된 템플릿을 만들고 동적으로 HTML페이지를 만들어서 클라이언트에 전달하는 방식
	요청이 올 때마다 서버에서 새로운 HTML페이지를 만들어 주기 때문에 서버 사이드 렌더링 방식이라고 함

-> <html xmlns:th="http://www.thyeleaf.org">

Controller 에서 해당 메소드에서 Model model
model.addAttribute("data",필요로 하는 객체 / 문자열)		->data 의 값 , 문자열 /필요로 하는 객체

view페이지(html) 에서 data라는 변수를 찾아 서버에서 필요로 하는 객체 / 문자열을 불러들어옴
th:text ="${data}"		-> data : 변수

--------------------------------------------------

스프링 시큐리티를 이용해 회원의 역할에 따라서 페이지별 접근 권한을 부여
(인증 -> 로그인 / 인가 -> 로그인 이후 접근이 허가 유무에 따라 권한 부여)


---------------------------------------------
validation 
